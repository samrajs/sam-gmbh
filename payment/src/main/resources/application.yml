server:
  port: 9080

spring:
  application:
    name: "payment"
  jpa:
    open-in-view: false
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=payment&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  sql:
    init:
      platform: postgres
      schema-locations:
        - classpath:init-schema.sql
      data-locations:
        - classpath:init-data.sql
      mode: always

payment-service:
  order-topic-name: order.events

kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 3
  replication-factor: 3

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  #value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  #value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
  payment-consumer-group-id: payment-processor-consumer
  auto-offset-reset: earliest
  #specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  #batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  #max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true

  opentelemetry:
    resource-attributes:
      application: ${spring.application.name}
      cluster: local
      # Micrometer Metrics configures this attribute with "unknown value".
      # It should probably be autoconfigured correctly by Spring Boot.
      "service.name": ${spring.application.name}

  # Traces-specific OpenTelemetry configuration
  otlp:
    tracing:
      endpoint: http://localhost:4318/v1/traces

logging:
  include-application-name: false
  pattern:
    correlation: "[${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
  level:
    com:
      sam:
        order: INFO

otel:
  traces:
    exporter: otlp
  metrics:
    exporter: none
  logs:
    exporter: none        